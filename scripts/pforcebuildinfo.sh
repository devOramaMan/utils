#!/bin/sh
set +o history
# Script to make build info like change list number, checkin status and branch
# for input to the application
#

show_help()
{
  echo
  echo "resolve build version information of the peforce project"
  echo "usage: pforcebuildinfo [path]"
  echo "Generates buildinfo.h and mkBuildInfo.log"
  exit
}


# if value is numer return number
resolve_value()
{
  value=$1
  re='^[0-9]+$'
  if ! [[ $value =~ $re ]] ; then
     echo ""
  else
    echo $value
  fi
}

#PATH TO iar project
WIN_BUILD_PATH=$1

if [ ! -d $WIN_BUILD_PATH ] ; then
  echo "Path doesn't exist $WIN_BUILD_PATH"
  show_help
  exit 1
fi

cd $WIN_BUILD_PATH

# output filename - the header file to be included by the application:
HEADER_FILE='BuildInfo.h'

BUILD_PATH=$(cygpath "$WIN_BUILD_PATH")

echo "Start make Build Info $DATE $TIME" > mkBuildInfo.log
echo "WIN_BUILD_PATH=$WIN_BUILD_PATH" >> mkBuildInfo.log
echo "BUILD_PATH=$BUILD_PATH" >> mkBuildInfo.log
BASH_ERROR=0
P4_ERROR=0
echo "Check dependecies..." >> mkBuildInfo.log
  
which awk 2>/dev/null >> mkBuildInfo.log
if [ $? -gt 0 ] ; then
  echo "Missing awk" >> mkBuildInfo.log
  BASH_ERROR=1
fi

which sed 2>/dev/null >> mkBuildInfo.log
if [ $? -gt 0 ] ; then
  echo "Missing sed" >> mkBuildInfo.log 
  BASH_ERROR=1
fi

which grep 2>/dev/null >> mkBuildInfo.log
if [ $? -gt 0 ] ; then
  echo "Missing grep" >> mkBuildInfo.log
  BASH_ERROR=1
fi

which wc 2>/dev/null >> mkBuildInfo.log
if [ $? -gt 0 ] ; then
  echo "Missing wc" >> mkBuildInfo.log
  BASH_ERROR=1
fi

if [ "$P4PORT" == "" ] ; then
  echo "Missing P4PORT system variable" >> mkBuildInfo.log
  P4_ERROR=1
fi

if [ "$P4USER" == "" ] ; then
  echo "Missing P4USER system variable" >> mkBuildInfo.log
  P4_ERROR=1
fi

if [ "$P4PASSWD" == "" ]  && [ "$P4PASSWORD" == "" ] ; then
  echo "Missing P4PASSWD or P4PASSWORD system variable" >> mkBuildInfo.log
  P4_ERROR=1
fi
 
if [ "$P4CLIENT" == "" ] ; then
  echo "Missing P4CLIENT system variable" >> mkBuildInfo.log
  P4_ERROR=1
fi

if [ $BASH_ERROR -gt 0 ] ; then
  echo // This file is autogenerated at build time    > ../Inc/$HEADER_FILE
  echo // Not to be edited or added to config control >> ../Inc/$HEADER_FILE
  echo // Missing Bash dependencies                   >> ../Inc/$HEADER_FILE
  echo \#define BUILDINFO_BUILD_NAME "UNKNOWN"        >> ../Inc/$HEADER_FILE
  echo \#define BUILDINFO_BRANCH "UNKNOWN"            >> ../Inc/$HEADER_FILE
  echo \#define BUILDINFO_LAST_CHANGE 0               >> ../Inc/$HEADER_FILE
  echo \#define BUILDINFO_CHECKIN_OK 0                >> ../Inc/$HEADER_FILE

  echo "Dependencie test contains error" >> mkBuildInfo.log
  echo "path: $(pwd)" >> mkBuildInfo.log
  exit 1
fi

# Removing "/EWARM" from build_path (new after introduzing CubeMX for code generation)
# NBNB: Build_path is the "build_path" with the same relative position as before and not the real buildpath for the project...


BUILD_PATH=${BUILD_PATH%\/*}
WIN_BUILD_PATH="${WIN_BUILD_PATH%\\*}"
WIN_BRANCH="${WIN_BUILD_PATH%\\*}"


echo "BUILD_PATH=$BUILD_PATH" >> mkBuildInfo.log
echo "WIN_BUILD_PATH=$WIN_BUILD_PATH" >> mkBuildInfo.log
echo "WIN_BRANCH=$WIN_BRANCH" >> mkBuildInfo.log



## Project specifics:
PRODUCT_PATH=//SW/Product

echo "PRODUCT_PATH=$PRODUCT_PATH" >> mkBuildInfo.log

# extrakt clange list number for:
#Demo_main
#Multi_main
#STM32Cube_FW_F1_V1_3_0

# Find the local build path by removing 5 topmost levels of BUILD_PATH:
# i.e. "/cygdrive/c/SwCM/SW/Demo/main/app/Build_F103RB_nucleo"
# becomes "main/app/Build_F103RB_nucleo"
SHORT_BUILD_PATH=${BUILD_PATH#/*/*/*/*/*/}

echo "SHORT_BUILD_PATH=$SHORT_BUILD_PATH" >> mkBuildInfo.log

# Removing lowest level directory by to find like "main/app"
BRANCH=$(echo $SHORT_BUILD_PATH | sed -e "s/\/[a-zA-Z0-9_-]*$//")

echo "BRANCH=$BRANCH" >> mkBuildInfo.log

BRANCH_MAJOR=0
BRANCH_MINOR=0
BRANCH_PATCH=0

USE_BRANCH_NUMBER=0

BRANCH_VERSION_NO=${BRANCH##*/}
echo BRANCH_VERSION_NO = $BRANCH_VERSION_NO >> mkBuildInfo.log
if [[ $BRANCH_VERSION_NO =~ [0-9] ]] ; then
  arr_BRANCH_VERSION_NO=(${BRANCH_VERSION_NO//./ })
  VAL=$(resolve_value ${arr_BRANCH_VERSION_NO[0]})
  if [ "$VAL" != "" ] ; then
    BRANCH_MAJOR=$VAL
    USE_BRANCH_NUMBER=1
  fi
  VAL=$(resolve_value ${arr_BRANCH_VERSION_NO[1]})
  if [ "$VAL" != "" ] ; then
    BRANCH_MINOR=$VAL
  fi
  VAL=$(resolve_value ${arr_BRANCH_VERSION_NO[2]})
  if [ "$VAL" != "" ] ; then
    BRANCH_PATCH=$VAL
  fi
fi

if [ $P4_ERROR -eq 0 ] ; then
  # Find checkin status (i.e. verify that all files are checked in) by searching for the
  # outcome "not opened on this.." and counting lines to conclude 1 if found.
  # P4OPENED_OUT=$(/cygdrive/c/Program\ Files/Perforce/p4 opened $PRODUCT_PATH/$BRANCH/... 2>&1)
  # getafix.kodyna.no:1666
  # echo  $PRODUCT_PATH/$BRANCH/...
  # p4 opened $PRODUCT_PATH/$BRANCH/...
  # exit
  P4OPENED_OUT=$(p4 opened $PRODUCT_PATH/$BRANCH/... 2>&1)
  echo "P4OPENED_OUT=$P4OPENED_OUT" >> mkBuildInfo.log
  ABS_ALL_CHECKED_IN=$(echo $P4OPENED_OUT | grep "not opened on this client" | wc -l)
  echo "ABS_ALL_CHECKED_IN=$ABS_ALL_CHECKED_IN" >> mkBuildInfo.log

  P4OPENED_OUT=$(p4 opened "$WIN_BRANCH/..." 2>&1)
  echo "WIN_P4OPENED_OUT=$P4OPENED_OUT" >> mkBuildInfo.log
  WIN_ALL_CHECKED_IN=$(echo $P4OPENED_OUT | grep "not opened on this client" | wc -l)
  echo "WIN_ALL_CHECKED_IN=$WIN_ALL_CHECKED_IN" >> mkBuildInfo.log

  #Check both windows path and p4 abs root path.
  if [ $WIN_ALL_CHECKED_IN -lt $ABS_ALL_CHECKED_IN ] ; then
    ALL_CHECKED_IN=$WIN_ALL_CHECKED_IN
  else
    ALL_CHECKED_IN=$ABS_ALL_CHECKED_IN
  fi
    

  if [ -z "$ALL_CHECKED_IN" ] ; then
    ALL_CHECKED_IN=0
  fi

  # Finding lowest level directory by removing greatest match with */ from BUILD_PATH:
  BUILD_NAME=${BUILD_PATH##*/}

  p4 changes -m 1 $PRODUCT_PATH/$BRANCH/... 2>&1 >>mkBuildInfo.log

  LAST_CHANGE=$(p4 changes -m 1 $PRODUCT_PATH/$BRANCH/... | awk '{print $2}')
  echo "LAST_CHANGE=$LAST_CHANGE" >> mkBuildInfo.log
  if [ -z "$LAST_CHANGE" ]; then
    #try using the windows path
    LAST_CHANGE=$(p4 changes -m 1 "$WIN_BRANCH/..." | awk '{print $2}')
    echo "LAST_CHANGE=$LAST_CHANGE" >> mkBuildInfo.log
    if [ -z "$LAST_CHANGE" ]; then
      LAST_CHANGE=0
    fi
  fi

  

  # Making the header file:
  echo // This file is autogenerated at build time        > $BUILD_PATH/Inc/$HEADER_FILE
  echo // Not to be edited or added to config control     >> $BUILD_PATH/Inc/$HEADER_FILE
  echo // argument input: $WIN_BUILD_PATH                         >> $BUILD_PATH/Inc/$HEADER_FILE
else
  echo "Missing Version Control dependencies (P4)" >> mkBuildInfo.log
  echo // This file is autogenerated at build time        > $BUILD_PATH/Inc/$HEADER_FILE
  echo // Not to be edited or added to config control     >> $BUILD_PATH/Inc/$HEADER_FILE
  echo // Missing version control info                    >> $BUILD_PATH/Inc/$HEADER_FILE
  echo // argument input: $WIN_BUILD_PATH                         >> $BUILD_PATH/Inc/$HEADER_FILE
  LAST_CHANGE=0
  ALL_CHECKED_IN=0
fi



						        
echo \#define BUILDINFO_BUILD_NAME "\"$BUILD_NAME\""    >> $BUILD_PATH/Inc/$HEADER_FILE
echo \#define BUILDINFO_BRANCH "\"$BRANCH\""            >> $BUILD_PATH/Inc/$HEADER_FILE

if [ $USE_BRANCH_NUMBER -gt 0 ] ; then
  echo \#define BUILDINFO_BRANCH_MAJOR $BRANCH_MAJOR	>> $BUILD_PATH/Inc/$HEADER_FILE
  echo \#define BUILDINFO_BRANCH_MINOR $BRANCH_MINOR	>> $BUILD_PATH/Inc/$HEADER_FILE
  echo \#define BUILDINFO_BRANCH_PATCH $BRANCH_PATCH	>> $BUILD_PATH/Inc/$HEADER_FILE
fi
echo \#define BUILDINFO_LAST_CHANGE $LAST_CHANGE        >> $BUILD_PATH/Inc/$HEADER_FILE
echo \#define BUILDINFO_CHECKIN_OK $ALL_CHECKED_IN      >> $BUILD_PATH/Inc/$HEADER_FILE

echo --------------------- >> mkBuildInfo.log
cat $BUILD_PATH/Inc/$HEADER_FILE >> mkBuildInfo.log
